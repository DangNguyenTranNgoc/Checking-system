/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import dao.CheckinDAO;
import dto.Checkin;
import dto.Daibieu;

import dto.WebCamInfo;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import static javafx.scene.input.DataFormat.URL;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class NewJFrame extends javax.swing.JFrame {

    DefaultComboBoxModel<WebCamInfo> defaultComBoBox;
    private Dimension ds = new Dimension(480, 360);
    private Dimension cs = WebcamResolution.VGA.getSize();
    private Webcam webCam = Webcam.getWebcams().get(0);//default webcam
    private WebcamPanel webCamPanel = new WebcamPanel(webCam, ds, false);
    private ArrayList<Checkin> listCheckin;
    private frmShowInfo frminfo;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        webCam.setViewSize(cs);
        webCamPanel.setFillArea(true);
        panelImage.setLayout(new FlowLayout());
        panelImage.add(webCamPanel);
        listCheckin = CheckinDAO.loadAllCheckin();
        setup();
    }

    public void setup() {
        String iconpath = System.getProperty("user.dir") + File.separator + "icon.png";
        File iconfile = new File(iconpath);
        ImageIcon icon = new ImageIcon(iconfile.getPath());
        this.setIconImage(icon.getImage());
        this.setTitle("Quét mã đại biểu");
        this.getContentPane().setBackground(Color.WHITE);
    }

//    public void setupComboBoxWebCam() {
//        int countWebCam = 0;
//        defaultComBoBox = new DefaultComboBoxModel<WebCamInfo>();
//        ObservableList<WebCamInfo> listWebCam = FXCollections.observableArrayList();
//        for (Webcam webcam : Webcam.getWebcams()) {
//            WebCamInfo webcaminfo = new WebCamInfo();
//            webcaminfo.setWebCamName(webcam.getName());
//            webcaminfo.setWebCamIndex(countWebCam);
//            listWebCam.add(webcaminfo);
//            defaultComBoBox.addElement(webcaminfo);
//            countWebCam++;
//        }
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cbboxWebCamSelect = new javax.swing.JComboBox<>();
        txtboxID = new javax.swing.JTextField();
        btnOpenCamera = new javax.swing.JButton();
        btnCloseCamera = new javax.swing.JButton();
        panelImage = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtboxName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtboxMa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtboxGender = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtboxFaculty = new javax.swing.JTextField();
        cbbChoosePeriod = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        btnShowInfo = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Chọn Webcam");

        txtboxID.setEnabled(false);

        btnOpenCamera.setText("Mở Camera");
        btnOpenCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenCameraActionPerformed(evt);
            }
        });

        btnCloseCamera.setText("Tắt Camera");
        btnCloseCamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseCameraActionPerformed(evt);
            }
        });

        panelImage.setBackground(new java.awt.Color(0, 0, 0));
        panelImage.setPreferredSize(new java.awt.Dimension(480, 360));

        javax.swing.GroupLayout panelImageLayout = new javax.swing.GroupLayout(panelImage);
        panelImage.setLayout(panelImageLayout);
        panelImageLayout.setHorizontalGroup(
            panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        panelImageLayout.setVerticalGroup(
            panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        jLabel2.setText("ID");

        jLabel3.setText("Tên");

        txtboxName.setEnabled(false);
        txtboxName.setPreferredSize(new java.awt.Dimension(200, 22));

        jLabel4.setText("Mã số");

        txtboxMa.setEnabled(false);
        txtboxMa.setMinimumSize(new java.awt.Dimension(50, 22));
        txtboxMa.setPreferredSize(new java.awt.Dimension(50, 22));

        jLabel5.setText("Giới tính");

        txtboxGender.setEnabled(false);
        txtboxGender.setPreferredSize(new java.awt.Dimension(50, 22));

        jLabel6.setText("Đơn vị");

        txtboxFaculty.setEnabled(false);
        txtboxFaculty.setPreferredSize(new java.awt.Dimension(100, 22));

        cbbChoosePeriod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lần 1", "Lần 2", "Lần 3", "Lần 4", "Lần 5" }));

        jButton1.setText("Tổng hợp");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnShowInfo.setText("Show Info");
        btnShowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cbboxWebCamSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOpenCamera)
                        .addGap(18, 18, 18)
                        .addComponent(btnCloseCamera))
                    .addComponent(panelImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtboxName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtboxID, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(txtboxMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(150, 150, 150)
                                .addComponent(txtboxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(txtboxFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(cbbChoosePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(btnShowInfo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbboxWebCamSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpenCamera)
                    .addComponent(btnCloseCamera)
                    .addComponent(btnShowInfo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtboxName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtboxMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtboxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(txtboxFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(cbbChoosePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(panelImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenCameraActionPerformed
        Thread t = new Thread() {
            @Override
            public void run() {
                webCamPanel.start();
                scan();
            }
        };
        t.setDaemon(true);
        t.start();
    }//GEN-LAST:event_btnOpenCameraActionPerformed

    private void btnCloseCameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseCameraActionPerformed
        if (webCam.isOpen()) {
            webCam.close();
        }
    }//GEN-LAST:event_btnCloseCameraActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        count();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnShowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInfoActionPerformed
        frminfo = new frmShowInfo();
        frminfo.setEnabled(true);
        frminfo.setVisible(true);
    }//GEN-LAST:event_btnShowInfoActionPerformed

    public void showInfo(Daibieu daibieu) {
        if (frminfo.isEnabled()) {
            frminfo.setDaibieu(daibieu);
            frminfo.setup();
        } else {
            frminfo = new frmShowInfo(daibieu);
            frminfo.setEnabled(true);
            frminfo.setVisible(true);
        }
    }

    private static BinaryBitmap toBinaryBitmap(BufferedImage image) {
        return new BinaryBitmap(new HybridBinarizer(new BufferedImageLuminanceSource(image)));
    }

    public void scan() {
        do {
            Result rs = null;
            BufferedImage image = null;

            if (webCam.isOpen()) {

                if ((image = webCam.getImage()) == null) {
                    continue;
                }

                try {
                    rs = new MultiFormatReader().decode(toBinaryBitmap(image));
                } catch (NullPointerException | NotFoundException ex) {

                }
            }
            if (rs != null) {
                txtboxID.setText(rs.getText());
                int id = Integer.parseInt(rs.getText());
                if (id >= 0 && id <= 200) {
                    Checkin ck = findById(id);
                    checkIn(ck);
                    playSound();
                    txtboxID.setText(rs.getText());
                    txtboxName.setText(ck.getDaibieu().getDbFirstname() + " " + ck.getDaibieu().getDbLastname());
                    txtboxMa.setText(ck.getDaibieu().getDbSbd());
                    if (ck.getDaibieu().isDbMale()) {
                        txtboxGender.setText("Nam");
                    } else {
                        txtboxGender.setText("Nữ");
                    }
                    txtboxFaculty.setText(ck.getDaibieu().getDbFaculty());
                    showInfo(ck.getDaibieu());
                }
            }
        } while (true);
    }

    public void checkIn(Checkin ck) {
        int period = cbbChoosePeriod.getSelectedIndex();
        switch (period) {
            case 0:
                ck.setCkCheck1(Boolean.TRUE);
                CheckinDAO.updateCheckin(ck);
                break;
            case 1:
                ck.setCkCheck2(Boolean.TRUE);
                CheckinDAO.updateCheckin(ck);
                break;
            case 2:
                ck.setCkCheck3(Boolean.TRUE);
                CheckinDAO.updateCheckin(ck);
                break;
            case 3:
                ck.setCkCheck4(Boolean.TRUE);
                CheckinDAO.updateCheckin(ck);
                break;
            case 4:
                ck.setCkCheck5(Boolean.TRUE);
                CheckinDAO.updateCheckin(ck);
                break;
            default:
                break;
        }
    }

    public void count() {
        int period = cbbChoosePeriod.getSelectedIndex();
        int sum;
        double rator;
        switch (period) {
            case 0:
                sum = 0;
                for (Checkin ck : listCheckin) {
                    if (ck.isCkCheck1()) {
                        sum++;
                    }
                }
                rator = sum / listCheckin.size() * 100;
                JOptionPane.showMessageDialog(null, "Lần điểm danh 1 có " + sum + " Đại biểu, chiếm " + format(rator) + "%", "Báo cáo", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1:
                sum = 0;
                for (Checkin ck : listCheckin) {
                    if (ck.isCkCheck2()) {
                        sum++;
                    }
                }
                rator = sum / listCheckin.size() * 100;
                JOptionPane.showMessageDialog(null, "Lần điểm danh 2 có " + sum + " Đại biểu, chiếm " + format(rator) + "%", "Báo cáo", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 2:
                sum = 0;
                sum = listCheckin.stream().filter((ck) -> (ck.getCkCheck3())).map((_item) -> 1).reduce(sum, Integer::sum);
                rator = sum / listCheckin.size() * 100;
                JOptionPane.showMessageDialog(null, "Lần điểm danh 3 có " + sum + " Đại biểu, chiếm " + format(rator) + "%", "Báo cáo", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 3:
                sum = 0;
                for (Checkin ck : listCheckin) {
                    if (ck.isCkCheck4()) {
                        sum++;
                    }
                }
                rator = sum / listCheckin.size() * 100;
                JOptionPane.showMessageDialog(null, "Lần điểm danh 4 có " + sum + " Đại biểu, chiếm " + format(rator) + "%", "Báo cáo", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 4:
                sum = 0;
                for (Checkin ck : listCheckin) {
                    if (ck.isCkCheck5()) {
                        sum++;
                    }
                }
                rator = sum / listCheckin.size() * 100;
                JOptionPane.showMessageDialog(null, "Lần điểm danh 5 có " + sum + " Đại biểu, chiếm " + format(rator) + "%", "Báo cáo", JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                break;
        }
    }

    public String format(double value) {
        DecimalFormat df = new DecimalFormat("#.0");
        return df.format(value);
    }

    public Checkin findById(int id) {
        for (Checkin ck : listCheckin) {
            if (ck.getCkId() == id) {
                return ck;
            }
        }
        return null;
    }

    public void playSound() {
        try {
            // Open an audio input stream.
            String path = System.getProperty("user.dir") + File.separator + "beep.wav";
            File filePath = new File(path);
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(filePath);
            // Get a sound clip resource.
            Clip clip = AudioSystem.getClip();
            // Open audio clip and load samples from the audio input stream.
            clip.open(audioIn);
            clip.start();
        } catch (UnsupportedAudioFileException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (LineUnavailableException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCloseCamera;
    private javax.swing.JButton btnOpenCamera;
    private javax.swing.JButton btnShowInfo;
    private javax.swing.JComboBox<String> cbbChoosePeriod;
    private javax.swing.JComboBox<String> cbboxWebCamSelect;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel panelImage;
    private javax.swing.JTextField txtboxFaculty;
    private javax.swing.JTextField txtboxGender;
    private javax.swing.JTextField txtboxID;
    private javax.swing.JTextField txtboxMa;
    private javax.swing.JTextField txtboxName;
    // End of variables declaration//GEN-END:variables
}
